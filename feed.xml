<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Christoph Pahmeyer</title>
        <link>https://chrispahm.github.io/</link>
        <description>This is my personal blog!</description>
        <lastBuildDate>Wed, 06 May 2020 11:00:07 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <image>
            <title>Christoph Pahmeyer</title>
            <url>https://chrispahm.github.io/assets/christoph_pahmeyer.jpg</url>
            <link>https://chrispahm.github.io/</link>
        </image>
        <copyright>All rights reserved 2020, Christoph Pahmeyer</copyright>
        <category>Web development</category>
        <category>Agricultural economics</category>
        <category>Operations research</category>
        <atom:link href="https://chrispahm.github.io/atom.xml" rel="self" type="application/rss+xml"/>
        <item>
            <title><![CDATA[Optional chaining arrives with ES2020]]></title>
            <link>https://chrispahm.github.io/posts/es2020-features.html</link>
            <guid>https://chrispahm.github.io/posts/es2020-features.html</guid>
            <pubDate>Tue, 05 May 2020 22:00:00 GMT</pubDate>
            <description><![CDATA['Uncaught TypeError&#58; Cannot read property' is known to be the most common JavaScript error. With the new 'optional chaining' feature in the upcoming ES2020, avoiding this error becomes a lot easier.
]]></description>
            <content:encoded><![CDATA[<h1>Accessing deeply nested data</h1><info datetime="2020-05-05T22:00:00.000Z">
      May 6, 2020 â€” 3 min read
    </info>
<p>Getting an <code>Uncaught TypeError: Cannot read property</code> error in JavaScript has happened to me too many times. The error has even been ranked the <a href="https://rollbar.com/blog/top-10-javascript-errors/" class="link" target="_blank">most frequent JavaScript error</a>. Especially when working with external data sources
this can be problem.
Consider the following example from the <a href="https://github.com/fruchtfolge/harmonie" class="link" target="_blank">harmonie</a> project, which parses agricultural field data from various input files (mostly <code>XML</code>):</p>
<pre><code class="language-js"><span class="hljs-keyword">let</span> applicationYear
<span class="hljs-comment">// try to access the application year from the farm subsidy form</span>
<span class="hljs-keyword">try</span> {
  applicationYear = data[<span class="hljs-string">'fsv:FSV'</span>][<span class="hljs-string">'fsv:FSVHeader'</span>][<span class="hljs-string">'commons:Antragsjahr'</span>]
} <span class="hljs-keyword">catch</span> (e) {
  <span class="hljs-comment">// no application year found -&gt; go on as it is optional anyway</span>
}
</code></pre>
<p>The <code>try...catch</code> block will now capture the error thrown when a property cannot be read. We could see this as â€˜defensive codeâ€™, as we canâ€™t trust the input data and have to consider missing properties in the nested tree. Instead of repeating the <code>try..catch</code> block for every variable I have been using the following function in the past (e.g. in the <a href="https://github.com/fruchtfolge/elan-parser/blob/master/index.js#L17" class="link" target="_blank">ELAN-Paser</a>):</p>
<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getSafe</span>(<span class="hljs-params">func</span>) </span>{
  <span class="hljs-keyword">try</span> {
    <span class="hljs-keyword">return</span> func()
  } <span class="hljs-keyword">catch</span> (e) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">''</span>
  }
}

<span class="hljs-keyword">const</span> applicationYear = getSafe(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> data[<span class="hljs-string">'fsv:FSV'</span>][<span class="hljs-string">'fsv:FSVHeader'</span>][<span class="hljs-string">'commons:Antragsjahr'</span>])
<span class="hljs-comment">// applicationYear is either the correct applicationYear from the data object OR undefined</span>
</code></pre>
<p>This shortens the amount of code to write every time you are unsure whether a property exists in an object or not.
While it is not much extra code, it is still repetitive and the function needs to be imported/defined in every new project. With the JavaScript standard ES2020, we donâ€™t need this anymore.</p>
<h2>A better way with optional chaining introduced with ES2020</h2>
<p>With the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining" class="link" target="_blank">optional chaining</a> feature introduced in ES2020, we donâ€™t need to define a <code>getSafe</code> function first, but can rather rely on native methods:</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> applicationYear = data[<span class="hljs-string">'fsv:FSV'</span>]?.[<span class="hljs-string">'fsv:FSVHeader'</span>]?.[<span class="hljs-string">'commons:Antragsjahr'</span>]
<span class="hljs-comment">// applicationYear is either the correct applicationYear from the data object OR undefined</span>
</code></pre>
<p>Awesome, isnâ€™t it? As of today, all up to date versions of modern browsers (Chrome,Firefox,Edge,Safari,Opera) <a href="https://caniuse.com/#feat=mdn-javascript_operators_optional_chaining" class="link" target="_blank">support optional chaining</a>. If you need support for older browsers, there also is a <a href="https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining" class="link" target="_blank">babel plugin</a> as well.</p>
<h2>Uncaught TypeErrors that cannot be solved by optional chaining</h2>
<p>Another classic example for getting the error is by misspelling a property name in a nested object:</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> field = {
  <span class="hljs-attr">properties</span>: {
    <span class="hljs-attr">cropCode</span>: <span class="hljs-number">415</span>
  }
}

<span class="hljs-comment">// misspelling key 'properties'</span>
<span class="hljs-keyword">const</span> cropCode = field.propetries.cropCode 
<span class="hljs-comment">// will thrown: Uncaught TypeError...</span>
</code></pre>
<p>Obviously, this cannot be solved by optional chaining, as the information is not optional. Using <a href="https://www.typescriptlang.org/" class="link" target="_blank">TypeScript</a> would have saved me from this error many times, however as of right now Iâ€™m just too lazy to set it up and annotate all of my code properly. Maybe in the not so distant future I will give it a tryâ€¦</p>
]]></content:encoded>
            <author>christoph.pahmeyer@uni-bonn.de (Christoph Pahmeyer)</author>
        </item>
        <item>
            <title><![CDATA[How to build a blog in less than 100 lines of code]]></title>
            <link>https://chrispahm.github.io/posts/static-site-generator.html</link>
            <guid>https://chrispahm.github.io/posts/static-site-generator.html</guid>
            <pubDate>Thu, 20 Feb 2020 23:00:00 GMT</pubDate>
            <description><![CDATA[Despite the many options available for static site generators, I wasn't really convinced with any of them. All I wanted was a simple, easy to customize option. And I wanted to write it myself ðŸ˜„]]></description>
            <content:encoded><![CDATA[<h1>How to build a blog in less than 100 lines of code</h1><info datetime="2020-02-20T23:00:00.000Z">
      February 21, 2020 â€” 8 min read
    </info>
<p>Iâ€™ve been thinking about writing a blog for quite some time. There are a couple of reasons that were motivating me to get started: One point was that I thought I should write down and comment on some of the code that I write, so I could get back to it at a later stage more easily, or just use it as a reference. A further reason was this wonderful conversation I had with <a href="https://github.com/chrispahm/chartjs-plugin-dragdata/issues/23#issuecomment-512803640" class="link" target="_blank">Vanessa Sochat</a> (still makes me super happy to read!). And finally, I wanted to get better at writing!</p>
<p>As of right now, Iâ€™m painfully slow at writing, and to be honest, I donâ€™t like at all that much. Especially in the scientific context, Iâ€™m regularly procrastinating instead of just getting started with a manuscript. However, that is about to change! Well, at least I hope so, as I want to gain more writing practice when working on this blog ðŸ˜„</p>
<p>Alright, so for writing a blog, you actually need to set-up a blog somewhere. My requirements were simple: I wanted to host it on GitHub pages, have the actual posts written in <a href="https://de.wikipedia.org/wiki/Markdown" class="link" target="_blank">Markdown</a>, and wanted as little setup/overhead as possible.</p>
<p>My first try was setting up <a href="https://help.github.com/en/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll" class="link" target="_blank">Jekyll</a> on GithHub pages. After deciding on the beautiful <a href="http://chalk.nielsenramon.com/" class="link" target="_blank">Chalk</a> theme, I started following the documentation on how to get things up and running.</p>
<p><a href="http://chalk.nielsenramon.com/" class="link" target="_blank"><img src="http://chalk.nielsenramon.com/assets/documentation/chalk-intro@2x-d0c0ee7141c3804d3a7c0db8992cbbb8248913a9f85923f1d3fa8343093978f0.png" alt="Chalk"></a>
<em>Screenshot of the Chalk Jekyll theme by Nielsen Ramon</em></p>
<p>The documentation is well written, however I was a little intimidated by its length. Install the software, prepare the git repo, understand local site testing, get to know how to add new posts/sites, read through the Chalk documentation to learn about customization. It all felt like a greater commitment than I initially intended. So after forking Chalk, I ended up not working on it for 3+ months.</p>
<p>Fast forward to a couple of weeks ago, the whole blog idea came up once again. Thinking about whether to continue work on the Jekyll based blog, I came to the conclusion that writing a static site generator myself shouldnâ€™t be all that hard. Conceptually, I thought that I would need a template <code>html</code> file, and a directory for my markdown posts. I also wanted to have a <code>projects</code> and an <code>about</code> page. Here, I thought writing these in <code>html</code> would be preferable, as that would give me more options on the individual styling than with parsed Markdown. Regarding the design, I wanted to closely stick to the wonderful blog by <a href="https://rsms.me/" class="link" target="_blank">Rasmus Andersson</a>. I especially love his <a href="https://rsms.me/inter/" class="link" target="_blank">Inter typeface</a>, which I plan to use on more upcoming projects.</p>
<p><img src="/assets/blog-setup.png" alt="Blog setup">
<em>The basic file structure of the static site generator</em></p>
<p>The image above shows the actual file structure. The overarching <code>index.html</code>, containing the header and footer, as well as the content divâ€™s for the about and projects page are stored in the <code>template</code> folder. As mentioned earlier, the <code>posts</code> directory contains the Markdown files. And thatâ€™s basically it! Sure, there is a top level <code>assets</code> folder where the <code>.css</code> and other static resources live, but all in all there is not much magic to the general setup.</p>
<p>Letâ€™s dive into the code. I write most of my projects in JavaScript (JS) / <a href="https://nodejs.org/en/" class="link" target="_blank">Node.js</a> (especially everything web related), and also used Node.js for this project. To be honest, I am not religious about coding languages, and highly believe that most of the things I do could be done in Python/Go/YourFavoriteProgrammingLanguage/Rust even faster, more performant or generally better (you could rant about this if there was a comment section). However, working in the web area requires you to know JavaScript at least to some degree. And then again, Iâ€™m a lazy person that knows his way around JS pretty well. So in essence, thatâ€™s why I eventually end up writing most of my stuff in JS.</p>
<p>For a start, weâ€™ll be looking into the <code>index.js</code> file that hosts the main logic. In order to be able to read our markdown posts, and the contents of our <code>template</code> folder, weâ€™ll be requiring the native <code>fs</code> module, as well as some methods from <code>path</code> module.
To show an estimated reading time at the beginning of the article, the <a href="https://www.npmjs.com/package/reading-time" class="link" target="_blank"><code>reading-time</code></a> package is used. At the beginning of the markdown posts, meta-data such as the posts title, a short preview of the article for the main page, as well as some keywords are stored in <code>YAML</code> format. We can read this meta-data using the <a href="https://www.npmjs.com/package/yaml-front-matter" class="link" target="_blank"><code>yaml-front-matter</code></a> package.</p>
<pre><code class="language-js"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>) 
<span class="hljs-keyword">const</span> { extname, basename } = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>) 
<span class="hljs-keyword">const</span> { promisify } = <span class="hljs-built_in">require</span>(<span class="hljs-string">'util'</span>)
<span class="hljs-keyword">const</span> readingTime = <span class="hljs-built_in">require</span>(<span class="hljs-string">'reading-time'</span>)
<span class="hljs-keyword">const</span> yamlFront = <span class="hljs-built_in">require</span>(<span class="hljs-string">'yaml-front-matter'</span>)
<span class="hljs-keyword">const</span> helpers = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./helpers'</span>)

<span class="hljs-keyword">const</span> readdir = promisify(fs.readdir)
<span class="hljs-keyword">const</span> readFile = promisify(fs.readFile)
<span class="hljs-keyword">const</span> stats = promisify(fs.stat)
</code></pre>
<p>As you may have already guessed from the use of the <code>promisify</code> method (exported by the native <code>util</code> package), Iâ€™m a huge fan of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" class="link" target="_blank"><code>promises</code></a>, and even more so of the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function" class="link" target="_blank"><code>async/await</code></a> sugar. In order to use the <code>async/await</code> keyword for asynchronously reading files etc., weâ€™ll wrap the main logic in a self invoking <code>async</code> function:</p>
<pre><code class="language-js">;
<span class="hljs-function">(<span class="hljs-params"><span class="hljs-keyword">async</span> (</span>) =&gt;</span> {
  <span class="hljs-comment">// the main logic goes here, so we can use the await keyword</span>
})()
</code></pre>
<p>Ok so first off, we start by reading the <code>index.html</code> template file, containing our page header and footer.
The <code>formatter</code> is created so that we can show a short date string in the post preview of the landing page (e.g. <em>Feb 2020</em>).
We proceed to get a list of all files in the <code>posts</code> directory, and filter the list by files with the extension <code>.md</code> (â†’ markdown).</p>
<pre><code class="language-js">;
<span class="hljs-function">(<span class="hljs-params"><span class="hljs-keyword">async</span> (</span>) =&gt;</span> {
  <span class="hljs-keyword">const</span> template = <span class="hljs-keyword">await</span> readFile(<span class="hljs-string">'./src/template/index.html'</span>, <span class="hljs-string">'utf8'</span>)
  <span class="hljs-keyword">const</span> formatter = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Intl</span>.DateTimeFormat(<span class="hljs-string">'en'</span>, {
    <span class="hljs-attr">month</span>: <span class="hljs-string">'short'</span>
  })
  <span class="hljs-comment">// read the entire posts directory and filter for markdown files</span>
  <span class="hljs-keyword">let</span> posts = <span class="hljs-keyword">await</span> readdir(<span class="hljs-string">'./src/posts'</span>)
  posts = posts.filter(<span class="hljs-function"><span class="hljs-params">post</span> =&gt;</span> extname(post) === <span class="hljs-string">'.md'</span>)
</code></pre>
<p>We then proceed to loop through all the posts that were found. For each post,
we create an object with properties for all the meta-info that we parsed from the <code>YAML</code> front-matter.
In addition, we add properties such as the estimated reading time, as well as year, month and date of creation for later use.
Eventually, we update the array that contained a path string of our current post with the newly created object.</p>
<pre><code class="language-js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; posts.length; i++) {
  <span class="hljs-comment">// read file content, parse yaml front-matter and markdown content</span>
  <span class="hljs-comment">// and store info in posts array</span>
  <span class="hljs-keyword">const</span> string = <span class="hljs-keyword">await</span> readFile(<span class="hljs-string">`./src/posts/<span class="hljs-subst">${posts[i]}</span>`</span>, <span class="hljs-string">'utf8'</span>)
  <span class="hljs-keyword">const</span> {
    birthtime
  } = <span class="hljs-keyword">await</span> stats(<span class="hljs-string">`./src/posts/<span class="hljs-subst">${posts[i]}</span>`</span>)
  <span class="hljs-keyword">const</span> parsed = yamlFront.loadFront(string)
  parsed.date = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>(birthtime)
  parsed.month = formatter.format(parsed.date)
  parsed.year = parsed.date.getFullYear()
  parsed.readingTime = readingTime(parsed.__content).text
  parsed.rendered = helpers.renderAndInsertDate(parsed)
  parsed.file = basename(posts[i], <span class="hljs-string">'.md'</span>)
  posts[i] = parsed
}
</code></pre>
<p>From then on, itâ€™s a piece of cake. Given our template <code>html</code>, we  start by
creating our landing page. The landing page will have a preview of the latest 15 posts and itâ€™s main contents. The post previews are specified in the <code>YAML</code> front-matter of each post.</p>
<pre><code class="language-js"><span class="hljs-comment">// create the landing page (index.html)</span>
<span class="hljs-comment">// get a string of the first 15 posts and create previews</span>
<span class="hljs-keyword">const</span> previewString = posts.slice(<span class="hljs-number">0</span>, <span class="hljs-number">14</span>).map(helpers.postPreview).join(<span class="hljs-string">'\n'</span>)
<span class="hljs-keyword">await</span> helpers.prepareSite(<span class="hljs-string">'index.html'</span>, template, previewString)

<span class="hljs-comment">// create about page</span>
<span class="hljs-keyword">const</span> aboutString = <span class="hljs-keyword">await</span> readFile(<span class="hljs-string">'./src/template/about.html'</span>, <span class="hljs-string">'utf8'</span>)
<span class="hljs-keyword">await</span> helpers.prepareSite(<span class="hljs-string">'about/index.html'</span>, template, aboutString)

<span class="hljs-comment">// create projects page</span>
<span class="hljs-keyword">const</span> projectsString = <span class="hljs-keyword">await</span> readFile(<span class="hljs-string">'./src/template/projects.html'</span>, <span class="hljs-string">'utf8'</span>)
<span class="hljs-keyword">await</span> helpers.prepareSite(<span class="hljs-string">'projects/index.html'</span>, template, projectsString)

<span class="hljs-comment">// create legal disclosure page</span>
<span class="hljs-keyword">const</span> legalString = <span class="hljs-keyword">await</span> readFile(<span class="hljs-string">'./src/template/impressum.html'</span>, <span class="hljs-string">'utf8'</span>)
<span class="hljs-keyword">await</span> helpers.prepareSite(<span class="hljs-string">'impressum/index.html'</span>, template, legalString)

<span class="hljs-comment">// create posts directory</span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; posts.length; i++) {
  <span class="hljs-keyword">await</span> helpers.prepareSite(<span class="hljs-string">`posts/<span class="hljs-subst">${posts[i].file}</span>.html`</span>,
    template, posts[i].rendered)
}
</code></pre>
<p>The last thing to cover is the <code>helpers</code> module. It exports three methods: <code>postPreview</code>, <code>renderAndInsertDate</code>, and <code>prepareSite</code>. The <code>postPreview</code> method simply returns an <code>html</code> string, which contains the date of creation, the hyperlink to the actual post and the posts preview which will be displayed on the landing page. The <code>renderAndInsertDate</code> is used to render the markdown content of a post (using <code>markdown-it</code>), and to add a small info snippet again containing the posts date of creation, and the estimated reading time.
At last, the <code>prepareSite</code> methods simply splits the <code>index.html</code> template file at the <code>&lt;!--* content goes here *--&gt; </code> comment, and injects the content.</p>
<pre><code class="language-js"><span class="hljs-built_in">module</span>.exports = {
  postPreview(post) {
    <span class="hljs-keyword">return</span> <span class="hljs-string">`&lt;a href="<span class="hljs-subst">${post.url || <span class="hljs-string">'posts/'</span> + post.file + <span class="hljs-string">'.html'</span>}</span>" class="post-preview"&gt;
        &lt;h3 class="post-preview-header"&gt;<span class="hljs-subst">${post.title}</span>&lt;h3 class="post-preview-link"&gt;â†ª&lt;/h3&gt;&lt;/h3&gt;
        &lt;div class="post-preview-body"&gt;
          &lt;p&gt;
          <span class="hljs-subst">${post.preview}</span>
          &lt;info datetime=""&gt;
            <span class="hljs-subst">${post.month}</span> <span class="hljs-subst">${post.year}</span> <span class="hljs-subst">${post.readingTime ? <span class="hljs-string">'â€” '</span> + post.readingTime : <span class="hljs-string">''</span>}</span>
          &lt;/info&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/a&gt;`</span>
  },
  renderAndInsertDate(post) {
    <span class="hljs-keyword">const</span> html = md.render(post.__content)
    <span class="hljs-comment">// add date, and estimated reading time</span>
    <span class="hljs-keyword">const</span> snippet = <span class="hljs-string">`&lt;info datetime="<span class="hljs-subst">${post.date.toISOString()}</span>"&gt;
      <span class="hljs-subst">${post.date.toLocaleString(<span class="hljs-string">'en-EN'</span>, { 
        year: <span class="hljs-string">'numeric'</span>, 
        month: <span class="hljs-string">'long'</span>, 
        day: <span class="hljs-string">'numeric'</span> 
      }</span>)} <span class="hljs-subst">${post.readingTime ? <span class="hljs-string">'â€” '</span> + post.readingTime : <span class="hljs-string">''</span>}</span>
    &lt;/info&gt;`</span>
     <span class="hljs-keyword">return</span> html.split(<span class="hljs-string">'&lt;/h1&gt;'</span>)[<span class="hljs-number">0</span>] + <span class="hljs-string">'&lt;/h1&gt;'</span> + snippet + html.split(<span class="hljs-string">'&lt;/h1&gt;'</span>)[<span class="hljs-number">1</span>]
  },
  <span class="hljs-keyword">async</span> prepareSite(name, template, content) {
    <span class="hljs-keyword">const</span> first = template.split(<span class="hljs-string">'&lt;!--*'</span>)[<span class="hljs-number">0</span>]
    <span class="hljs-keyword">const</span> second = template.split(<span class="hljs-string">'*--&gt;'</span>)[<span class="hljs-number">1</span>]
    <span class="hljs-keyword">await</span> writeFile(name, <span class="hljs-string">`<span class="hljs-subst">${first}</span>\n<span class="hljs-subst">${content}</span>\n<span class="hljs-subst">${second}</span>`</span>, <span class="hljs-string">'utf8'</span>)
  }
}
</code></pre>
]]></content:encoded>
            <author>christoph.pahmeyer@uni-bonn.de (Christoph Pahmeyer)</author>
        </item>
    </channel>
</rss>