{
    "version": "https://jsonfeed.org/version/1",
    "title": "Christoph Pahmeyer",
    "home_page_url": "https://chrispahm.github.io/",
    "feed_url": "https://chrispahm.github.io/json.json",
    "description": "This is my personal blog!",
    "icon": "https://chrispahm.github.io/assets/christoph_pahmeyer.jpg",
    "author": {
        "name": "Christoph Pahmeyer",
        "url": "https://chrispahm.github.io/about"
    },
    "items": [
        {
            "id": "https://chrispahm.github.io/posts/video-abstract.html",
            "content_html": "<h1>Producing a video abstract</h1><info datetime=\"2020-11-10T23:00:00.000Z\">\n      November 11, 2020 ‚Äî 5 min read\n    </info>\n<p>For the DIGICROP 2020 online conference, I had the pleasure to produce a short\nvideo abstract for our most recent discussion paper on the <a href=\"/projects/#fruchtfolge\" class=\"link\" target=\"_blank\">‚ÄòFruchtfolge‚Äô</a> model (<a href=\"https://ageconsearch.umn.edu/record/305287\" class=\"link\" target=\"_blank\">link to the discussion paper</a>):</p>\n<iframe class=\"video\" height=400 src=\"https://www.youtube.com/embed/twT1HQcJwnU\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n</iframe>\n<br>\n<p>Following the conference, we got some encouraging feedback regarding our work (ü§ó thanks so much again!), and a few people asked about instructions on how to (technically) produce a similar video.</p>\n<p>In this blog post I will try to outline the major steps involved in the production of the video, as well as some lessons learned that will help you to avoid some of the mistakes I made üòä</p>\n<h2>Preparation üöß</h2>\n<p>In order to produce a video abstract, you need the following hardware:</p>\n<ul>\n<li>Laptop</li>\n<li>Camera (ideally a DSLR, but a phone will suffice)</li>\n<li>Tripod</li>\n<li>Optional: Microphone, or second phone to record audio</li>\n</ul>\n<p>Before I began recording the video, I made a transcript for what I would say.\nI would really recommend to do this (opposed to freestyling your talk given some keywords), because it forces you to think about your key messages and how you would like to communicate them. Be aware that ~150-180 words already produces a video of one minute (!), so keep it as short as possible. The DIGICROP conference had a three minute maximum rule for video trailers, which I think is a really good length.</p>\n<p>After I finished writing the transcript, I set-up my room like shown in the pictures:</p>\n<p><img src=\"/assets/video_abstract_1.png\" alt=\"Room setup image 1\">\n<img src=\"/assets/video_abstract_2.png\" alt=\"Room setup image 2\"></p>\n<p>For the teleprompting, I used the (free) website <a href=\"https://www.teleprompt.online/\" class=\"link\" target=\"_blank\">teleprompt.online</a>, where you can paste your pre-written text, and adjust the display size and scrolling speed to your liking. It will also show you how long it will take you to read the text out loud (given the selected prompt speed), which is really helpful as well!</p>\n<p>Make sure the camera is right above the laptop screen, as this way it seems like you are looking into the camera (as though you are reading from the teleprompter ü§ì).</p>\n<h2>Recording üé•</h2>\n<p>Now that you have everything set-up, you are ready to start recording!</p>\n<p>I would recommend to record the whole text in the same position (the one indicated in the pictures). Even if you will overlay the video with a screen recording later, this way the sound quality stays the same. I forgot about this when making my video and that‚Äôs why the sound quality changes frequently‚Ä¶</p>\n<p>Optionally, you can place a phone very close to your mouth (but out of sight of the camera), and use it to record the audio using a voice memo app. Make sure to clap once when starting the recording, this makes it easier to align the sound of the camera recording and the one of the phone when cutting the video later üòõ.\nAgain, this is optional, but I think it really increases the quality of the sound!</p>\n<p>Another thing I would recommend is to always record sections shorter than 2 minutes. For me it was very difficult to record longer sections without screwing up something (reading from teleprompter is not so easy I figured)‚Ä¶</p>\n<h2>Screen recordings</h2>\n<p>After recording the video and sound tracks, you can start\nrecording your screen.</p>\n<p>There are many possible ways for recording the screen, however both macOS (<a href=\"https://www.cnbc.com/2018/05/20/how-to-record-the-screen-on-my-mac.html\" class=\"link\" target=\"_blank\">more info here</a>) and\nWindows 10 (<a href=\"https://uk.pcmag.com/operating-systems/86044/how-to-capture-video-clips-in-windows-10\" class=\"link\" target=\"_blank\">more info here</a>) have built-in software for screen recording which should totally suffice.</p>\n<p>As you already have the video of yourself speaking about your research, you can now sit in front of your computer, listening to your video through headphones, and record the screen showing the things you talk about. That part is quite easy then üòä</p>\n<h2>Editing</h2>\n<p>Now that you have all your raw video and sound materials ready, you can start cutting the video.</p>\n<p><img src=\"/assets/iMovie.png\" alt=\"iMovie Project Fruchtfolge\"></p>\n<p>If you‚Äôve got a Mac, you can use iMovie, which also has a nice sound library to include some background music. If you‚Äôre working on a computer with Windows 10 installed, you can use the built-in video editor called ‚ÄûVideo-Editor‚Äú (<a href=\"https://support.microsoft.com/en-us/windows/create-films-with-video-editor-94e651f8-a5be-ae03-3c50-e49f013d47f6\" class=\"link\" target=\"_blank\">this is part of the Windows ‚ÄûPhotos‚Äú App</a>). If you want to include some background music, you can get some royalty-free jingles from websites like <a href=\"https://www.bensound.com/\" class=\"link\" target=\"_blank\">bensound</a>.</p>\n<p>With any of these video editing tools, you can also create an intro and outro video section. Those sections typically include the title of your work, as well as your name (etc.).</p>\n<p>In my video, I also added some royalty-free stock video (and photo) footage which I got from <a href=\"https://www.pexels.com/de-de/videos/\" class=\"link\" target=\"_blank\">Pexels</a> and <a href=\"https://pixabay.com/de/videos/\" class=\"link\" target=\"_blank\">Pixabay</a>.</p>\n<h2>Some more inspiration</h2>\n<p>If you want some creative inspiration I would highly recommend to watch the following video made by <a href=\"\" class=\"link\" target=\"_blank\">Sandwich Video</a> on how to create a cool ad without (much) money:</p>\n <iframe class=\"video\" height=400 src=\"https://www.youtube.com/embed/fD6BLALVmf0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen>\n </iframe>\n <br>\n<p>Make sure to also check out <a href=\"https://wistia.com/series/one-ten-one-hundred?wchannelid=z2vptfjlxk&amp;wmediaid=9tyzqy3rr8\" class=\"link\" target=\"_blank\">the making-of video</a>, as it is both interesting and covers a couple of simple tricks to improve your videos without any additional costs!</p>\n<p>Last but not least, please also have a look at this wonderful video abstract made by\nRoan Plotz (et al.) for their paper ‚Äú<a href=\"https://www.cell.com/current-biology/fulltext/S0960-9822(20)30353-5\" class=\"link\" target=\"_blank\">Oxpeckers Help Rhinos Evade Humans</a>‚Äù:</p>\n <iframe class=\"video\" height=400 src=\"https://www.youtube.com/embed/0gurqlmjorM\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n <br>\n<p>Thanks for reading! I hope you enjoyed this little making-of, and have fun producing video abstracts üòä</p>\n",
            "url": "https://chrispahm.github.io/posts/video-abstract.html",
            "title": "Producing a video abstract",
            "summary": "For the DIGICROP 2020 online conference, I had the pleasure to produce a short video abstract for our most recent article üé•. If you're interested in how the video was produced, and possibly looking for some inspiration for you next video abstract, read on üòä\n",
            "date_modified": "2020-11-10T23:00:00.000Z",
            "author": {
                "name": "Christoph Pahmeyer",
                "url": "https://chrispahm.github.io/about"
            }
        },
        {
            "id": "https://observablehq.com/@chrispahm/operations-research-in-observables",
            "content_html": "</h1><info datetime=\"2020-07-04T22:00:00.000Z\">\n      July 5, 2020 ‚Äî 0 min read\n    </info>undefined",
            "url": "https://observablehq.com/@chrispahm/operations-research-in-observables",
            "title": "Operations research in ObservableHQ",
            "summary": "Just recently I learned about Observables (reactive notebooks in JavaScript), and I'm a huge fan already üòç. One of the neat things you can use them for is writing optimisation models (including beautiful visualisations and markup) that anyone can run and edit right from the browser. Check it out! üëÄ",
            "date_modified": "2020-07-04T22:00:00.000Z",
            "author": {
                "name": "Christoph Pahmeyer",
                "url": "https://chrispahm.github.io/about"
            }
        },
        {
            "id": "https://chrispahm.github.io/posts/es2020-features.html",
            "content_html": "<h1>Accessing deeply nested data</h1><info datetime=\"2020-05-05T22:00:00.000Z\">\n      May 6, 2020 ‚Äî 3 min read\n    </info>\n<p>Getting an <code>Uncaught TypeError: Cannot read property</code> error in JavaScript has happened to me too many times. The error has even been ranked the <a href=\"https://rollbar.com/blog/top-10-javascript-errors/\" class=\"link\" target=\"_blank\">most frequent JavaScript error</a>. Especially when working with external data sources\nthis can be problem.\nConsider the following example from the <a href=\"https://github.com/fruchtfolge/harmonie\" class=\"link\" target=\"_blank\">harmonie</a> project, which parses agricultural field data from various input files (mostly <code>XML</code>):</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">let</span> applicationYear\n<span class=\"hljs-comment\">// try to access the application year from the farm subsidy form</span>\n<span class=\"hljs-keyword\">try</span> {\n  applicationYear = data[<span class=\"hljs-string\">'fsv:FSV'</span>][<span class=\"hljs-string\">'fsv:FSVHeader'</span>][<span class=\"hljs-string\">'commons:Antragsjahr'</span>]\n} <span class=\"hljs-keyword\">catch</span> (e) {\n  <span class=\"hljs-comment\">// no application year found -&gt; go on as it is optional anyway</span>\n}\n</code></pre>\n<p>The <code>try...catch</code> block will now capture the error thrown when a property cannot be read. We could see this as ‚Äòdefensive code‚Äô, as we can‚Äôt trust the input data and have to consider missing properties in the nested tree. Instead of repeating the <code>try..catch</code> block for every variable I have been using the following function in the past (e.g. in the <a href=\"https://github.com/fruchtfolge/elan-parser/blob/master/index.js#L17\" class=\"link\" target=\"_blank\">ELAN-Paser</a>):</p>\n<pre><code class=\"language-js\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getSafe</span>(<span class=\"hljs-params\">func</span>) </span>{\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">return</span> func()\n  } <span class=\"hljs-keyword\">catch</span> (e) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">''</span>\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> applicationYear = getSafe(<span class=\"hljs-function\"><span class=\"hljs-params\">()</span> =&gt;</span> data[<span class=\"hljs-string\">'fsv:FSV'</span>][<span class=\"hljs-string\">'fsv:FSVHeader'</span>][<span class=\"hljs-string\">'commons:Antragsjahr'</span>])\n<span class=\"hljs-comment\">// applicationYear is either the correct applicationYear from the data object OR undefined</span>\n</code></pre>\n<p>This shortens the amount of code to write every time you are unsure whether a property exists in an object or not.\nWhile it is not much extra code, it is still repetitive and the function needs to be imported/defined in every new project. With the JavaScript standard ES2020, we don‚Äôt need this anymore.</p>\n<h2>A better way with optional chaining introduced with ES2020</h2>\n<p>With the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining\" class=\"link\" target=\"_blank\">optional chaining</a> feature introduced in ES2020, we don‚Äôt need to define a <code>getSafe</code> function first, but can rather rely on native methods:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> applicationYear = data[<span class=\"hljs-string\">'fsv:FSV'</span>]?.[<span class=\"hljs-string\">'fsv:FSVHeader'</span>]?.[<span class=\"hljs-string\">'commons:Antragsjahr'</span>]\n<span class=\"hljs-comment\">// applicationYear is either the correct applicationYear from the data object OR undefined</span>\n</code></pre>\n<p>Awesome, isn‚Äôt it? As of today, all up to date versions of modern browsers (Chrome,Firefox,Edge,Safari,Opera) <a href=\"https://caniuse.com/#feat=mdn-javascript_operators_optional_chaining\" class=\"link\" target=\"_blank\">support optional chaining</a>. If you need support for older browsers, there also is a <a href=\"https://babeljs.io/docs/en/babel-plugin-proposal-optional-chaining\" class=\"link\" target=\"_blank\">babel plugin</a> as well.</p>\n<h2>Uncaught TypeErrors that cannot be solved by optional chaining</h2>\n<p>Another classic example for getting the error is by misspelling a property name in a nested object:</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> field = {\n  <span class=\"hljs-attr\">properties</span>: {\n    <span class=\"hljs-attr\">cropCode</span>: <span class=\"hljs-number\">415</span>\n  }\n}\n\n<span class=\"hljs-comment\">// misspelling key 'properties'</span>\n<span class=\"hljs-keyword\">const</span> cropCode = field.propetries.cropCode \n<span class=\"hljs-comment\">// will thrown: Uncaught TypeError...</span>\n</code></pre>\n<p>Obviously, this cannot be solved by optional chaining, as the information is not optional. Using <a href=\"https://www.typescriptlang.org/\" class=\"link\" target=\"_blank\">TypeScript</a> would have saved me from this error many times, however as of right now I‚Äôm just too lazy to set it up and annotate all of my code properly. Maybe in the not so distant future I will give it a try‚Ä¶</p>\n",
            "url": "https://chrispahm.github.io/posts/es2020-features.html",
            "title": "Optional chaining arrives with ES2020",
            "summary": "'Uncaught TypeError&#58; Cannot read property' is known to be the most common JavaScript error. With the new 'optional chaining' feature in the upcoming ES2020, avoiding this error becomes a lot easier.\n",
            "date_modified": "2020-05-05T22:00:00.000Z",
            "author": {
                "name": "Christoph Pahmeyer",
                "url": "https://chrispahm.github.io/about"
            }
        },
        {
            "id": "https://chrispahm.github.io/posts/static-site-generator.html",
            "content_html": "<h1>How to build a blog in less than 100 lines of code</h1><info datetime=\"2020-02-20T23:00:00.000Z\">\n      February 21, 2020 ‚Äî 8 min read\n    </info>\n<p>I‚Äôve been thinking about writing a blog for quite some time. There are a couple of reasons that were motivating me to get started: One point was that I thought I should write down and comment on some of the code that I write, so I could get back to it at a later stage more easily, or just use it as a reference. A further reason was this wonderful conversation I had with <a href=\"https://github.com/chrispahm/chartjs-plugin-dragdata/issues/23#issuecomment-512803640\" class=\"link\" target=\"_blank\">Vanessa Sochat</a> (still makes me super happy to read!). And finally, I wanted to get better at writing!</p>\n<p>As of right now, I‚Äôm painfully slow at writing, and to be honest, I don‚Äôt like at all that much. Especially in the scientific context, I‚Äôm regularly procrastinating instead of just getting started with a manuscript. However, that is about to change! Well, at least I hope so, as I want to gain more writing practice when working on this blog üòÑ</p>\n<p>Alright, so for writing a blog, you actually need to set-up a blog somewhere. My requirements were simple: I wanted to host it on GitHub pages, have the actual posts written in <a href=\"https://de.wikipedia.org/wiki/Markdown\" class=\"link\" target=\"_blank\">Markdown</a>, and wanted as little setup/overhead as possible.</p>\n<p>My first try was setting up <a href=\"https://help.github.com/en/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll\" class=\"link\" target=\"_blank\">Jekyll</a> on GithHub pages. After deciding on the beautiful <a href=\"http://chalk.nielsenramon.com/\" class=\"link\" target=\"_blank\">Chalk</a> theme, I started following the documentation on how to get things up and running.</p>\n<p><a href=\"http://chalk.nielsenramon.com/\" class=\"link\" target=\"_blank\"><img src=\"http://chalk.nielsenramon.com/assets/documentation/chalk-intro@2x-d0c0ee7141c3804d3a7c0db8992cbbb8248913a9f85923f1d3fa8343093978f0.png\" alt=\"Chalk\"></a>\n<em>Screenshot of the Chalk Jekyll theme by Nielsen Ramon</em></p>\n<p>The documentation is well written, however I was a little intimidated by its length. Install the software, prepare the git repo, understand local site testing, get to know how to add new posts/sites, read through the Chalk documentation to learn about customization. It all felt like a greater commitment than I initially intended. So after forking Chalk, I ended up not working on it for 3+ months.</p>\n<p>Fast forward to a couple of weeks ago, the whole blog idea came up once again. Thinking about whether to continue work on the Jekyll based blog, I came to the conclusion that writing a static site generator myself shouldn‚Äôt be all that hard. Conceptually, I thought that I would need a template <code>html</code> file, and a directory for my markdown posts. I also wanted to have a <code>projects</code> and an <code>about</code> page. Here, I thought writing these in <code>html</code> would be preferable, as that would give me more options on the individual styling than with parsed Markdown. Regarding the design, I wanted to closely stick to the wonderful blog by <a href=\"https://rsms.me/\" class=\"link\" target=\"_blank\">Rasmus Andersson</a>. I especially love his <a href=\"https://rsms.me/inter/\" class=\"link\" target=\"_blank\">Inter typeface</a>, which I plan to use on more upcoming projects.</p>\n<p><img src=\"/assets/blog-setup.png\" alt=\"Blog setup\">\n<em>The basic file structure of the static site generator</em></p>\n<p>The image above shows the actual file structure. The overarching <code>index.html</code>, containing the header and footer, as well as the content div‚Äôs for the about and projects page are stored in the <code>template</code> folder. As mentioned earlier, the <code>posts</code> directory contains the Markdown files. And that‚Äôs basically it! Sure, there is a top level <code>assets</code> folder where the <code>.css</code> and other static resources live, but all in all there is not much magic to the general setup.</p>\n<p>Let‚Äôs dive into the code. I write most of my projects in JavaScript (JS) / <a href=\"https://nodejs.org/en/\" class=\"link\" target=\"_blank\">Node.js</a> (especially everything web related), and also used Node.js for this project. To be honest, I am not religious about coding languages, and highly believe that most of the things I do could be done in Python/Go/YourFavoriteProgrammingLanguage/Rust even faster, more performant or generally better (you could rant about this if there was a comment section). However, working in the web area requires you to know JavaScript at least to some degree. And then again, I‚Äôm a lazy person that knows his way around JS pretty well. So in essence, that‚Äôs why I eventually end up writing most of my stuff in JS.</p>\n<p>For a start, we‚Äôll be looking into the <code>index.js</code> file that hosts the main logic. In order to be able to read our markdown posts, and the contents of our <code>template</code> folder, we‚Äôll be requiring the native <code>fs</code> module, as well as some methods from <code>path</code> module.\nTo show an estimated reading time at the beginning of the article, the <a href=\"https://www.npmjs.com/package/reading-time\" class=\"link\" target=\"_blank\"><code>reading-time</code></a> package is used. At the beginning of the markdown posts, meta-data such as the posts title, a short preview of the article for the main page, as well as some keywords are stored in <code>YAML</code> format. We can read this meta-data using the <a href=\"https://www.npmjs.com/package/yaml-front-matter\" class=\"link\" target=\"_blank\"><code>yaml-front-matter</code></a> package.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'fs'</span>) \n<span class=\"hljs-keyword\">const</span> { extname, basename } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'path'</span>) \n<span class=\"hljs-keyword\">const</span> { promisify } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'util'</span>)\n<span class=\"hljs-keyword\">const</span> readingTime = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'reading-time'</span>)\n<span class=\"hljs-keyword\">const</span> yamlFront = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'yaml-front-matter'</span>)\n<span class=\"hljs-keyword\">const</span> helpers = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">'./helpers'</span>)\n\n<span class=\"hljs-keyword\">const</span> readdir = promisify(fs.readdir)\n<span class=\"hljs-keyword\">const</span> readFile = promisify(fs.readFile)\n<span class=\"hljs-keyword\">const</span> stats = promisify(fs.stat)\n</code></pre>\n<p>As you may have already guessed from the use of the <code>promisify</code> method (exported by the native <code>util</code> package), I‚Äôm a huge fan of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" class=\"link\" target=\"_blank\"><code>promises</code></a>, and even more so of the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function\" class=\"link\" target=\"_blank\"><code>async/await</code></a> sugar. In order to use the <code>async/await</code> keyword for asynchronously reading files etc., we‚Äôll wrap the main logic in a self invoking <code>async</code> function:</p>\n<pre><code class=\"language-js\">;\n<span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-keyword\">async</span> (</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// the main logic goes here, so we can use the await keyword</span>\n})()\n</code></pre>\n<p>Ok so first off, we start by reading the <code>index.html</code> template file, containing our page header and footer.\nThe <code>formatter</code> is created so that we can show a short date string in the post preview of the landing page (e.g. <em>Feb 2020</em>).\nWe proceed to get a list of all files in the <code>posts</code> directory, and filter the list by files with the extension <code>.md</code> (‚Üí markdown).</p>\n<pre><code class=\"language-js\">;\n<span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-keyword\">async</span> (</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> template = <span class=\"hljs-keyword\">await</span> readFile(<span class=\"hljs-string\">'./src/template/index.html'</span>, <span class=\"hljs-string\">'utf8'</span>)\n  <span class=\"hljs-keyword\">const</span> formatter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Intl</span>.DateTimeFormat(<span class=\"hljs-string\">'en'</span>, {\n    <span class=\"hljs-attr\">month</span>: <span class=\"hljs-string\">'short'</span>\n  })\n  <span class=\"hljs-comment\">// read the entire posts directory and filter for markdown files</span>\n  <span class=\"hljs-keyword\">let</span> posts = <span class=\"hljs-keyword\">await</span> readdir(<span class=\"hljs-string\">'./src/posts'</span>)\n  posts = posts.filter(<span class=\"hljs-function\"><span class=\"hljs-params\">post</span> =&gt;</span> extname(post) === <span class=\"hljs-string\">'.md'</span>)\n</code></pre>\n<p>We then proceed to loop through all the posts that were found. For each post,\nwe create an object with properties for all the meta-info that we parsed from the <code>YAML</code> front-matter.\nIn addition, we add properties such as the estimated reading time, as well as year, month and date of creation for later use.\nEventually, we update the array that contained a path string of our current post with the newly created object.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; posts.length; i++) {\n  <span class=\"hljs-comment\">// read file content, parse yaml front-matter and markdown content</span>\n  <span class=\"hljs-comment\">// and store info in posts array</span>\n  <span class=\"hljs-keyword\">const</span> string = <span class=\"hljs-keyword\">await</span> readFile(<span class=\"hljs-string\">`./src/posts/<span class=\"hljs-subst\">${posts[i]}</span>`</span>, <span class=\"hljs-string\">'utf8'</span>)\n  <span class=\"hljs-keyword\">const</span> {\n    birthtime\n  } = <span class=\"hljs-keyword\">await</span> stats(<span class=\"hljs-string\">`./src/posts/<span class=\"hljs-subst\">${posts[i]}</span>`</span>)\n  <span class=\"hljs-keyword\">const</span> parsed = yamlFront.loadFront(string)\n  parsed.date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-built_in\">Date</span>(birthtime)\n  parsed.month = formatter.format(parsed.date)\n  parsed.year = parsed.date.getFullYear()\n  parsed.readingTime = readingTime(parsed.__content).text\n  parsed.rendered = helpers.renderAndInsertDate(parsed)\n  parsed.file = basename(posts[i], <span class=\"hljs-string\">'.md'</span>)\n  posts[i] = parsed\n}\n</code></pre>\n<p>From then on, it‚Äôs a piece of cake. Given our template <code>html</code>, we  start by\ncreating our landing page. The landing page will have a preview of the latest 15 posts and it‚Äôs main contents. The post previews are specified in the <code>YAML</code> front-matter of each post.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-comment\">// create the landing page (index.html)</span>\n<span class=\"hljs-comment\">// get a string of the first 15 posts and create previews</span>\n<span class=\"hljs-keyword\">const</span> previewString = posts.slice(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">14</span>).map(helpers.postPreview).join(<span class=\"hljs-string\">'\\n'</span>)\n<span class=\"hljs-keyword\">await</span> helpers.prepareSite(<span class=\"hljs-string\">'index.html'</span>, template, previewString)\n\n<span class=\"hljs-comment\">// create about page</span>\n<span class=\"hljs-keyword\">const</span> aboutString = <span class=\"hljs-keyword\">await</span> readFile(<span class=\"hljs-string\">'./src/template/about.html'</span>, <span class=\"hljs-string\">'utf8'</span>)\n<span class=\"hljs-keyword\">await</span> helpers.prepareSite(<span class=\"hljs-string\">'about/index.html'</span>, template, aboutString)\n\n<span class=\"hljs-comment\">// create projects page</span>\n<span class=\"hljs-keyword\">const</span> projectsString = <span class=\"hljs-keyword\">await</span> readFile(<span class=\"hljs-string\">'./src/template/projects.html'</span>, <span class=\"hljs-string\">'utf8'</span>)\n<span class=\"hljs-keyword\">await</span> helpers.prepareSite(<span class=\"hljs-string\">'projects/index.html'</span>, template, projectsString)\n\n<span class=\"hljs-comment\">// create legal disclosure page</span>\n<span class=\"hljs-keyword\">const</span> legalString = <span class=\"hljs-keyword\">await</span> readFile(<span class=\"hljs-string\">'./src/template/impressum.html'</span>, <span class=\"hljs-string\">'utf8'</span>)\n<span class=\"hljs-keyword\">await</span> helpers.prepareSite(<span class=\"hljs-string\">'impressum/index.html'</span>, template, legalString)\n\n<span class=\"hljs-comment\">// create posts directory</span>\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-number\">0</span>; i &lt; posts.length; i++) {\n  <span class=\"hljs-keyword\">await</span> helpers.prepareSite(<span class=\"hljs-string\">`posts/<span class=\"hljs-subst\">${posts[i].file}</span>.html`</span>,\n    template, posts[i].rendered)\n}\n</code></pre>\n<p>The last thing to cover is the <code>helpers</code> module. It exports three methods: <code>postPreview</code>, <code>renderAndInsertDate</code>, and <code>prepareSite</code>. The <code>postPreview</code> method simply returns an <code>html</code> string, which contains the date of creation, the hyperlink to the actual post and the posts preview which will be displayed on the landing page. The <code>renderAndInsertDate</code> is used to render the markdown content of a post (using <code>markdown-it</code>), and to add a small info snippet again containing the posts date of creation, and the estimated reading time.\nAt last, the <code>prepareSite</code> methods simply splits the <code>index.html</code> template file at the <code>&lt;!--* content goes here *--&gt; </code> comment, and injects the content.</p>\n<pre><code class=\"language-js\"><span class=\"hljs-built_in\">module</span>.exports = {\n  postPreview(post) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`&lt;a href=\"<span class=\"hljs-subst\">${post.url || <span class=\"hljs-string\">'posts/'</span> + post.file + <span class=\"hljs-string\">'.html'</span>}</span>\" class=\"post-preview\"&gt;\n        &lt;h3 class=\"post-preview-header\"&gt;<span class=\"hljs-subst\">${post.title}</span>&lt;h3 class=\"post-preview-link\"&gt;‚Ü™&lt;/h3&gt;&lt;/h3&gt;\n        &lt;div class=\"post-preview-body\"&gt;\n          &lt;p&gt;\n          <span class=\"hljs-subst\">${post.preview}</span>\n          &lt;info datetime=\"\"&gt;\n            <span class=\"hljs-subst\">${post.month}</span> <span class=\"hljs-subst\">${post.year}</span> <span class=\"hljs-subst\">${post.readingTime ? <span class=\"hljs-string\">'‚Äî '</span> + post.readingTime : <span class=\"hljs-string\">''</span>}</span>\n          &lt;/info&gt;\n          &lt;/p&gt;\n        &lt;/div&gt;\n      &lt;/a&gt;`</span>\n  },\n  renderAndInsertDate(post) {\n    <span class=\"hljs-keyword\">const</span> html = md.render(post.__content)\n    <span class=\"hljs-comment\">// add date, and estimated reading time</span>\n    <span class=\"hljs-keyword\">const</span> snippet = <span class=\"hljs-string\">`&lt;info datetime=\"<span class=\"hljs-subst\">${post.date.toISOString()}</span>\"&gt;\n      <span class=\"hljs-subst\">${post.date.toLocaleString(<span class=\"hljs-string\">'en-EN'</span>, { \n        year: <span class=\"hljs-string\">'numeric'</span>, \n        month: <span class=\"hljs-string\">'long'</span>, \n        day: <span class=\"hljs-string\">'numeric'</span> \n      }</span>)} <span class=\"hljs-subst\">${post.readingTime ? <span class=\"hljs-string\">'‚Äî '</span> + post.readingTime : <span class=\"hljs-string\">''</span>}</span>\n    &lt;/info&gt;`</span>\n     <span class=\"hljs-keyword\">return</span> html.split(<span class=\"hljs-string\">'&lt;/h1&gt;'</span>)[<span class=\"hljs-number\">0</span>] + <span class=\"hljs-string\">'&lt;/h1&gt;'</span> + snippet + html.split(<span class=\"hljs-string\">'&lt;/h1&gt;'</span>)[<span class=\"hljs-number\">1</span>]\n  },\n  <span class=\"hljs-keyword\">async</span> prepareSite(name, template, content) {\n    <span class=\"hljs-keyword\">const</span> first = template.split(<span class=\"hljs-string\">'&lt;!--*'</span>)[<span class=\"hljs-number\">0</span>]\n    <span class=\"hljs-keyword\">const</span> second = template.split(<span class=\"hljs-string\">'*--&gt;'</span>)[<span class=\"hljs-number\">1</span>]\n    <span class=\"hljs-keyword\">await</span> writeFile(name, <span class=\"hljs-string\">`<span class=\"hljs-subst\">${first}</span>\\n<span class=\"hljs-subst\">${content}</span>\\n<span class=\"hljs-subst\">${second}</span>`</span>, <span class=\"hljs-string\">'utf8'</span>)\n  }\n}\n</code></pre>\n",
            "url": "https://chrispahm.github.io/posts/static-site-generator.html",
            "title": "How to build a blog in less than 100 lines of code",
            "summary": "Despite the many options available for static site generators, I wasn't really convinced with any of them. All I wanted was a simple, easy to customize option. And I wanted to write it myself üòÑ",
            "date_modified": "2020-02-20T23:00:00.000Z",
            "author": {
                "name": "Christoph Pahmeyer",
                "url": "https://chrispahm.github.io/about"
            }
        }
    ]
}